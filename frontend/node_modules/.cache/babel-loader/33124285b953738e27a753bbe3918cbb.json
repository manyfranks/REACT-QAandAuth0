{"ast":null,"code":"import auth0 from 'auth0-js';\n\nclass Auth {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      // the following three lines MUST be updated\n      domain: 'dev-l91z3s8s.us.auth0.com',\n      audience: 'https://dev-l91z3s8s.us.auth0.com/userinfo',\n      clientID: '6civVn0p1Vbw0LrWUjkCmfi3D5oteddT',\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'id_token',\n      scope: 'openid profile'\n    });\n    this.getProfile = this.getProfile.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.signIn = this.signIn.bind(this);\n    this.signOut = this.signOut.bind(this);\n  }\n\n  getProfile() {\n    return this.profile;\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  isAuthenticated() {\n    return new Date().getTime() < this.expiresAt;\n  }\n\n  signIn() {\n    this.auth0.authorize();\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        if (err) return reject(err);\n\n        if (!authResult || !authResult.idToken) {\n          return reject(err);\n        }\n\n        this.idToken = authResult.idToken;\n        this.profile = authResult.idTokenPayload; // set the time that the id token will expire at\n\n        this.expiresAt = authResult.idTokenPayload.exp * 1000;\n        resolve();\n      });\n    });\n  }\n\n  signOut() {\n    // clear id token, profile, and expiration\n    this.idToken = null;\n    this.profile = null;\n    this.expiresAt = null;\n  }\n\n}\n\nconst auth0Client = new Auth();\nexport default auth0Client;","map":{"version":3,"sources":["C:/Users/matt/Desktop/qa-app/frontend/src/Auth.js"],"names":["auth0","Auth","constructor","WebAuth","domain","audience","clientID","redirectUri","responseType","scope","getProfile","bind","handleAuthentication","isAuthenticated","signIn","signOut","profile","getIdToken","idToken","Date","getTime","expiresAt","authorize","Promise","resolve","reject","parseHash","err","authResult","idTokenPayload","exp","auth0Client"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,GAAG;AACZ,SAAKF,KAAL,GAAa,IAAIA,KAAK,CAACG,OAAV,CAAkB;AAC7B;AACAC,MAAAA,MAAM,EAAE,2BAFqB;AAG7BC,MAAAA,QAAQ,EAAE,4CAHmB;AAI7BC,MAAAA,QAAQ,EAAE,kCAJmB;AAK7BC,MAAAA,WAAW,EAAE,gCALgB;AAM7BC,MAAAA,YAAY,EAAE,UANe;AAO7BC,MAAAA,KAAK,EAAE;AAPsB,KAAlB,CAAb;AAUA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKE,eAAL,GAAuB,KAAKA,eAAL,CAAqBF,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKG,MAAL,GAAc,KAAKA,MAAL,CAAYH,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKI,OAAL,GAAe,KAAKA,OAAL,CAAaJ,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEDD,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKM,OAAZ;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKC,OAAZ;AACD;;AAEDL,EAAAA,eAAe,GAAG;AAChB,WAAO,IAAIM,IAAJ,GAAWC,OAAX,KAAuB,KAAKC,SAAnC;AACD;;AAEDP,EAAAA,MAAM,GAAG;AACP,SAAKd,KAAL,CAAWsB,SAAX;AACD;;AAEDV,EAAAA,oBAAoB,GAAG;AACrB,WAAO,IAAIW,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKzB,KAAL,CAAW0B,SAAX,CAAqB,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACxC,YAAID,GAAJ,EAAS,OAAOF,MAAM,CAACE,GAAD,CAAb;;AACT,YAAI,CAACC,UAAD,IAAe,CAACA,UAAU,CAACV,OAA/B,EAAwC;AACtC,iBAAOO,MAAM,CAACE,GAAD,CAAb;AACD;;AACD,aAAKT,OAAL,GAAeU,UAAU,CAACV,OAA1B;AACA,aAAKF,OAAL,GAAeY,UAAU,CAACC,cAA1B,CANwC,CAOxC;;AACA,aAAKR,SAAL,GAAiBO,UAAU,CAACC,cAAX,CAA0BC,GAA1B,GAAgC,IAAjD;AACAN,QAAAA,OAAO;AACR,OAVD;AAWD,KAZM,CAAP;AAaD;;AAEDT,EAAAA,OAAO,GAAG;AACR;AACA,SAAKG,OAAL,GAAe,IAAf;AACA,SAAKF,OAAL,GAAe,IAAf;AACA,SAAKK,SAAL,GAAiB,IAAjB;AACD;;AAxDQ;;AA2DX,MAAMU,WAAW,GAAG,IAAI9B,IAAJ,EAApB;AAEA,eAAe8B,WAAf","sourcesContent":["import auth0 from 'auth0-js';\r\n\r\nclass Auth {\r\n  constructor() {\r\n    this.auth0 = new auth0.WebAuth({\r\n      // the following three lines MUST be updated\r\n      domain: 'dev-l91z3s8s.us.auth0.com',\r\n      audience: 'https://dev-l91z3s8s.us.auth0.com/userinfo',\r\n      clientID: '6civVn0p1Vbw0LrWUjkCmfi3D5oteddT',\r\n      redirectUri: 'http://localhost:3000/callback',\r\n      responseType: 'id_token',\r\n      scope: 'openid profile'\r\n    });\r\n\r\n    this.getProfile = this.getProfile.bind(this);\r\n    this.handleAuthentication = this.handleAuthentication.bind(this);\r\n    this.isAuthenticated = this.isAuthenticated.bind(this);\r\n    this.signIn = this.signIn.bind(this);\r\n    this.signOut = this.signOut.bind(this);\r\n  }\r\n\r\n  getProfile() {\r\n    return this.profile;\r\n  }\r\n\r\n  getIdToken() {\r\n    return this.idToken;\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return new Date().getTime() < this.expiresAt;\r\n  }\r\n\r\n  signIn() {\r\n    this.auth0.authorize();\r\n  }\r\n\r\n  handleAuthentication() {\r\n    return new Promise((resolve, reject) => {\r\n      this.auth0.parseHash((err, authResult) => {\r\n        if (err) return reject(err);\r\n        if (!authResult || !authResult.idToken) {\r\n          return reject(err);\r\n        }\r\n        this.idToken = authResult.idToken;\r\n        this.profile = authResult.idTokenPayload;\r\n        // set the time that the id token will expire at\r\n        this.expiresAt = authResult.idTokenPayload.exp * 1000;\r\n        resolve();\r\n      });\r\n    })\r\n  }\r\n\r\n  signOut() {\r\n    // clear id token, profile, and expiration\r\n    this.idToken = null;\r\n    this.profile = null;\r\n    this.expiresAt = null;\r\n  }\r\n}\r\n\r\nconst auth0Client = new Auth();\r\n\r\nexport default auth0Client;"]},"metadata":{},"sourceType":"module"}